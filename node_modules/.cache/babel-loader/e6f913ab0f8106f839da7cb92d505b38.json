{"ast":null,"code":"var _jsxFileName = \"/home/tradcliffe/fitness_tracker/src/components/Activities.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { fetchActivites, getCurrentToken } from '../api';\nimport Activity from './Activity';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const createActivity = async ({\n  activityName,\n  activityDescription\n}) => {\n  await fetch('http://fitnesstrac-kr.herokuapp.com/api/activities', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${getCurrentToken()}`\n    },\n    body: JSON.stringify({\n      name: activityName,\n      description: activityDescription\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n  }).catch(console.error);\n};\n\nconst Activities = () => {\n  _s();\n\n  const [activities, setActivities] = useState([]);\n  const [creator, setCreator] = useState('');\n  const [activityName, setActivityName] = useState('');\n  const [activityDescription, setActivityDescription] = useState('');\n  useEffect(() => {\n    fetchActivites().then(data => setActivities(data));\n    console.log(activities);\n  }, []);\n  activities.forEach(activity => activity.name = activitiesName);\n\n  if (getCurrentToken()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activities\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Activities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n\n          if (activityName === activitiesName) {\n            return alert('That activity already exists.');\n          } else {\n            createActivity({\n              activityName,\n              activityDescription\n            });\n            alert('Your activity has been created!');\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          onChange: e => setActivityName(e.target.value),\n          value: activityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Goal: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          onChange: e => setActivityDescription(e.target.value),\n          value: activityDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Activity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), activities ? activities.map((activity, index) => /*#__PURE__*/_jsxDEV(Activity, {\n        creator: creator,\n        setCreator: setCreator,\n        activity: activity\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 63\n      }, this)) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activities\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Activities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), activities ? activities.map((activity, index) => /*#__PURE__*/_jsxDEV(Activity, {\n        creator: creator,\n        setCreator: setCreator,\n        activity: activity\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 63\n      }, this)) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Activities, \"Hbz6cq2GwZjBUhBR2kDNdlte8x0=\");\n\n_c = Activities;\nexport default Activities;\n\nvar _c;\n\n$RefreshReg$(_c, \"Activities\");","map":{"version":3,"sources":["/home/tradcliffe/fitness_tracker/src/components/Activities.js"],"names":["React","useEffect","useState","fetchActivites","getCurrentToken","Activity","createActivity","activityName","activityDescription","fetch","method","headers","body","JSON","stringify","name","description","then","response","json","result","console","log","catch","error","Activities","activities","setActivities","creator","setCreator","setActivityName","setActivityDescription","data","forEach","activity","activitiesName","e","preventDefault","alert","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchActivites, getCurrentToken } from '../api';\nimport Activity from './Activity';\n\n\nexport const createActivity = async ({activityName, activityDescription}) => {\n    await fetch('http://fitnesstrac-kr.herokuapp.com/api/activities', {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${getCurrentToken()}`\n          },\n        body: JSON.stringify({\n            name: activityName,\n            description: activityDescription\n      })\n    }).then(response => response.json())\n    .then(result => {\n        console.log(result);\n    })\n    .catch(console.error);\n}\n\n\nconst Activities = () => {\n\n    const [activities, setActivities] = useState([]);\n    const [creator, setCreator] = useState('');\n    const [activityName, setActivityName] = useState('');\n    const [activityDescription, setActivityDescription] = useState('');\n\n    useEffect(() => {\n        fetchActivites()\n        .then((data) => setActivities(data))\n        console.log(activities)\n    }, [])\n\n    activities.forEach(activity => activity.name = activitiesName)\n\n\n    if(getCurrentToken()) {\n    return (\n        <div className='activities'>\n            <h1>Activities</h1>\n            <form onSubmit={e => {\n              e.preventDefault();\n              if(activityName === activitiesName){\n                return alert('That activity already exists.')\n              } else {\n              createActivity({activityName, activityDescription});\n              alert('Your activity has been created!');\n              }\n\n            }} >\n            <label>Name: </label>\n              <input type='text' required onChange={(e) => setActivityName(e.target.value)} value={activityName} >\n                </input>\n            <label>Goal: </label>\n              <input type='text' required onChange={(e) => setActivityDescription(e.target.value)} value={activityDescription} >\n                </input>\n              <button type='submit'>Create Activity</button>\n            </form>\n            {activities ? activities.map((activity, index) => <Activity creator={creator} setCreator={setCreator} key={index} activity={activity} /> ) : null }\n         </div>\n    )} else {\n        return (\n            <div className='activities'>\n            <h1>Activities</h1>\n            {activities ? activities.map((activity, index) => <Activity creator={creator} setCreator={setCreator} key={index} activity={activity} /> ) : null }\n         </div>\n\n        )\n    }\n}\n\n\nexport default Activities;"]},"metadata":{},"sourceType":"module"}